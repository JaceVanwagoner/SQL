--For this project, I downloaded Spotify data from Kaggle.
    Then I created a table to insert Spotify data into.
    Finally, I performed analytics on the data using SQL.-- 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL.

--Which song is the least popular?--

SELECT track_name
,popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity
LIMIT 1
;
--What is the longest song on the playlist in minutes?--

SELECT track_name AS Song
,ROUND(CAST(duration_ms AS REAL) / 60000, 2) AS minutes
FROM BIT_DB.Spotifydata
ORDER BY minutes desc
LIMIT 1
;
--Which artist has the most songs in the top 50 and what are they?--

SELECT artist_name
,track_name
FROM BIT_DB.Spotifydata
WHERE artist_name = (
    SELECT artist_name
    FROM BIT_DB.Spotifydata
    GROUP BY artist_name
    ORDER BY COUNT(*) DESC
    LIMIT 1
);
--what is the top 10 artists based on popularity?--

SELECT artist_name
,MAX(popularity) AS Rating
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY Rating DESC
LIMIT 10
;
--What is the average danceability percentage for the top 10 songs?--

SELECT AVG(danceability)*100 AS Need_to_Dance
FROM (
    SELECT danceability
    FROM BIT_DB.Spotifydata
    ORDER BY popularity Desc
    LIMIT 10
);
